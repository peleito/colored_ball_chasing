#!/usr/bin/env python
PACKAGE = "shape_detector"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

gen.add("object_name", str_t, 0, \
        "Name that is given to detected objects", "")

shape_enum = gen.enum( \
        [ \
        gen.const("Cylinder", int_t, 5, "Detect a cylinder"), \
        gen.const("Sphere", int_t, 4, "Detect a sphere") \
        ], \
        "An enum to set the shape")
    # The shape values have to be identical with the pcl::SACMODEL_* consts.
gen.add("shape", int_t, 0, "Shape that we try to detect", 5, 4, 5, \
        edit_method=shape_enum)

RADIUS_LOWER_LIMIT = 0.01
RADIUS_UPPER_LIMIT = 1.0
radii = gen.add_group("Radii")
radii.add("min_radius", double_t, 0, \
        "Objects with a smaller radius will not be detected", \
        0.1, RADIUS_LOWER_LIMIT, RADIUS_UPPER_LIMIT)
radii.add("max_radius", double_t, 0, \
        "Objects with a greater radius will not be detected", \
        0.2, RADIUS_LOWER_LIMIT, RADIUS_UPPER_LIMIT)

gen.add("normal_distance_weight", double_t, 0, \
        "normal-distance-weight", \
        0.1, 0.001, 1.0)
gen.add("distance_threshold", double_t, 0, \
        "distance-threshold", \
        0.05, 0.001, 1.0)
gen.add("num_nearest_neighbors", int_t, 0, \
        "Number nearest neighbors used to calculate normals", \
        50, 5, 100)
gen.add("max_iterations", int_t, 0, \
        "Maximum number of iterations", \
        100, 1, 20000)
gen.add("optimize_coefficients", bool_t, 0, \
	"Optimize coefficients", \
	True)

exit(gen.generate(PACKAGE, "shape_detector", "Parameters"))
