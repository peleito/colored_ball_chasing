#!/usr/bin/env python
PACKAGE = "feature_detector"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

surf = gen.add_group("surf")
surf.add("hessian_threshold", double_t, 0, \
        "Only local extrema with a Hessian-determinant above this will " + \
        "be kept as keypoints", \
        500., 2., 10000.)
surf.add("num_octaves", int_t, 0, \
        "Number of pyramid octaves",
        4, 1, 20)
surf.add("num_octave_layers", int_t, 0, \
        "Number of images in each octave",
        3, 1, 20)
surf.add("extended", bool_t, 0, \
        "false: 64-element; true: 128-element descriptor",
        False)
surf.add("upright", bool_t, 0, \
        "true: don't compute orientation",
        False)

matcher = gen.add_group("matcher")
norm_types = gen.enum([ \
        gen.const("L1", int_t, 2, "Sum of absolute differences"), \
        gen.const("L2", int_t, 4, "Sqrt of sum of squared differences")], \
        "An enum to set the norm-type, used by the matcher")
    # The constants have to be identical to the cv::NORM_* consts.
matcher.add("norm_type", int_t, 0, "Type for calculating norms", 4, 2, 4, \
        edit_method=norm_types)
matcher.add("cross_check", bool_t, 0, "Cross-checking", False)

target_selection = gen.add_group("target_selection")
target_selection.add("filename", str_t, 0, \
        "Name of file for saving/loading target selection", "")
target_selection.add("save_selection", bool_t, 0, \
        "Save current area/target selection to file", False)
target_selection.add("load_selection", bool_t, 0, \
        "Load area/target selection from file", False)

gen.add("match_distance_threshold", double_t, 0, \
        "Only matches above this threshold are considered", \
        0.25, 0.1, 100.)
gen.add("ransac_reproj_threshold", double_t, 0, \
        "Only points with a smaller reprojection-error are considered " + \
        "when finding the homography", \
        3.0, 0.5, 100.)
gen.add("object_name", str_t, 0, \
        "Name that is given to detected objects", "")

exit(gen.generate(PACKAGE, "feature_detector", "Parameters"))
