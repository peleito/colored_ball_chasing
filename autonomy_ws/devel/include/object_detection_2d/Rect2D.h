// Generated by gencpp from file object_detection_2d/Rect2D.msg
// DO NOT EDIT!


#ifndef OBJECT_DETECTION_2D_MESSAGE_RECT2D_H
#define OBJECT_DETECTION_2D_MESSAGE_RECT2D_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <object_detection_2d/Point2D.h>

namespace object_detection_2d
{
template <class ContainerAllocator>
struct Rect2D_
{
  typedef Rect2D_<ContainerAllocator> Type;

  Rect2D_()
    : upper_left()
    , width(0)
    , height(0)  {
    }
  Rect2D_(const ContainerAllocator& _alloc)
    : upper_left(_alloc)
    , width(0)
    , height(0)  {
  (void)_alloc;
    }



   typedef  ::object_detection_2d::Point2D_<ContainerAllocator>  _upper_left_type;
  _upper_left_type upper_left;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;





  typedef boost::shared_ptr< ::object_detection_2d::Rect2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_detection_2d::Rect2D_<ContainerAllocator> const> ConstPtr;

}; // struct Rect2D_

typedef ::object_detection_2d::Rect2D_<std::allocator<void> > Rect2D;

typedef boost::shared_ptr< ::object_detection_2d::Rect2D > Rect2DPtr;
typedef boost::shared_ptr< ::object_detection_2d::Rect2D const> Rect2DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_detection_2d::Rect2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_detection_2d::Rect2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace object_detection_2d

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'object_detection_2d': ['/home/team1/autonomy_ws/src/object_detection_2d/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::object_detection_2d::Rect2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detection_2d::Rect2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection_2d::Rect2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detection_2d::Rect2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection_2d::Rect2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detection_2d::Rect2D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_detection_2d::Rect2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40f85e4054f7fc5c03f469651a145434";
  }

  static const char* value(const ::object_detection_2d::Rect2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40f85e4054f7fc5cULL;
  static const uint64_t static_value2 = 0x03f469651a145434ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_detection_2d::Rect2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_detection_2d/Rect2D";
  }

  static const char* value(const ::object_detection_2d::Rect2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_detection_2d::Rect2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_detection_2d/Point2D upper_left\n\
\n\
int32 width\n\
int32 height\n\
\n\
================================================================================\n\
MSG: object_detection_2d/Point2D\n\
int32 x\n\
int32 y\n\
";
  }

  static const char* value(const ::object_detection_2d::Rect2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_detection_2d::Rect2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.upper_left);
      stream.next(m.width);
      stream.next(m.height);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Rect2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_detection_2d::Rect2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_detection_2d::Rect2D_<ContainerAllocator>& v)
  {
    s << indent << "upper_left: ";
    s << std::endl;
    Printer< ::object_detection_2d::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.upper_left);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_DETECTION_2D_MESSAGE_RECT2D_H
